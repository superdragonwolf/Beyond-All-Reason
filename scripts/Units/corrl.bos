//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     8
// NumberOfPieces                      8
// LengthOfScripts                     268
// NumberOfStaticVars                  1
// UKZero                              0
// OffsetToScriptCodeIndexArray        9cc
// OffsetToScriptNameOffsetArray       9ec
// OffsetToPieceNameOffsetArray        a0c
// OffsetToScriptCode                  2c
// OffsetToNameArray                   a2c

// OffsetToFirstName                   a2c

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare1, flare2, flare3, turret;

static-var  gun_1;
static-var  Stunned;


#define SIG_AIM				2


#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"


Create()
{
	hide flare1;
	hide flare3;
	hide flare2;
	gun_1 = flare1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	turn turret to x-axis <-25> speed <25.00000>;
	spin turret around y-axis speed <25.0>;
}
Stop()
{
	spin turret around y-axis speed <0.0>;
}
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
    turn turret to x-axis <-25> speed <25.00000>;
    spin turret around y-axis speed <25.0>;
}

SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 5000;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	stop-spin turret around y-axis;
	turn turret to y-axis heading speed <450.000000>;
	turn turret to x-axis <0.000000> - pitch speed <450.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = flare1;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare3;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}

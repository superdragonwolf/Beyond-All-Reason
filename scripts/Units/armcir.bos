#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare6, flare5, flare4, flare3, flare2, base, turret, ring, spindle, aimy1, aimx1;

static-var  gun_1, last_fire, firstaim;

// Signal definitions
#define SIG_AIM				2
#define DELAY_UNIT_VAR 1024


#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
    firstaim = 1;
	spin aimy1 around y-axis speed <22.0>;
	turn aimx1 to x-axis <-15> speed <22.0>;
	turn spindle to z-axis <0> speed <60>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 1000;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide flare6;
	hide flare5;
	hide flare4;
	hide flare3;
	hide flare2;
	hide flare1;
	gun_1 = flare1;
	firstaim = 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
    signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn aimy1 to y-axis heading speed <250>;
	turn aimx1 to x-axis 0 - pitch speed <250>;
	wait-for-turn aimy1 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	spin spindle around z-axis speed <-240>;
	
	if( gun_1 == 0 )
	{
		wait-for-turn spindle around z-axis;
		sleep 50;
	}
	if( gun_1 == 1 )
	{
		sleep 50;
	}
	if( gun_1 == 2 )
	{
		wait-for-turn spindle around z-axis;
		sleep 50;
	}
	if( gun_1 == 3 )
	{
		sleep 50;
	}
	if( gun_1 == 4 )
	{
		wait-for-turn spindle around z-axis;
		sleep 50;
	}
	if( gun_1 == 5 )
	{
		sleep 50;
	}
	++gun_1;
	if( gun_1 == 6 )
	{
		gun_1 = flare1;
	}
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = spindle;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode spindle type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		explode flare4 type BITMAPONLY | NOHEATCLOUD;
		explode flare5 type BITMAPONLY | NOHEATCLOUD;
		explode flare6 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode spindle type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FALL | NOHEATCLOUD;
		explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3 type FALL | NOHEATCLOUD;
		explode flare4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare6 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode spindle type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare4 type SMOKE | FALL | NOHEATCLOUD;
		explode flare5 type SMOKE | FALL | NOHEATCLOUD;
		explode flare6 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode spindle type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare4 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
